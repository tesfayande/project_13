package com.chatapp.server.controller;// UserController.javaimport com.chatapp.server.Models.Agent;import com.chatapp.server.Models.Customer;import com.chatapp.server.Models.User;import com.chatapp.server.dto.UserDTO;import com.chatapp.server.payload.request.RegisterUserRequest;import com.chatapp.server.repository.AgentRepository;import com.chatapp.server.repository.CustomerRepository;import com.chatapp.server.service.UserService;import lombok.RequiredArgsConstructor;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.List;import java.util.stream.Collectors;@RestController@RequestMapping("/api/users")@RequiredArgsConstructorpublic class UserController {    private final UserService userService;    private final CustomerRepository customerRepository;    private final AgentRepository agentRepository;    // Add this method to UserController.java    @GetMapping    public ResponseEntity<List<UserDTO>> getAllUsers() {        List<User> users = userService.findAll();        List<UserDTO> userDTOs = users.stream()                .map(UserDTO::fromEntity)                .collect(Collectors.toList());        return ResponseEntity.ok(userDTOs);    }    @PostMapping("/register")    public ResponseEntity<UserDTO> registerUser(@RequestBody RegisterUserRequest request) {        // Check if email already exists        if (userService.existsByEmail(request.getEmail())) {            throw new RuntimeException("Email already exists");        }        // Create user        User user = new User();        user.setFirstName(request.getFirstName());        user.setLastName(request.getLastName());        user.setEmail(request.getEmail());        user.setPassword(request.getPassword()); // In real app, encrypt this        user.setName(request.getName());        if (request.getBirthdate() != null) {            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");            user.setBirthdate(LocalDateTime.parse(request.getBirthdate() + "T00:00:00"));        }        user.setType(request.getType());        User savedUser = userService.save(user);        // Create customer or agent based on type        if (request.getType() == User.UserType.CUSTOMER) {            Customer customer = new Customer();            customer.setUser(savedUser);            customerRepository.save(customer);        } else if (request.getType() == User.UserType.AGENT) {            Agent agent = new Agent();            agent.setUser(savedUser);            agentRepository.save(agent);        }        return ResponseEntity.ok(UserDTO.fromEntity(savedUser));    }    @GetMapping("/{id}")    public ResponseEntity<UserDTO> getUser(@PathVariable Long id) {        User user = userService.findById(id)                .orElseThrow(() -> new RuntimeException("User not found"));        return ResponseEntity.ok(UserDTO.fromEntity(user));    }}