package com.chatapp.server.controller;// ChatController.java (Updated)import com.chatapp.server.Models.Message;import com.chatapp.server.dto.MessageDTO;import com.chatapp.server.dto.UserDTO;import com.chatapp.server.payload.request.SendMessageRequest;import com.chatapp.server.service.MessageService;import lombok.RequiredArgsConstructor;import org.springframework.messaging.handler.annotation.MessageMapping;import org.springframework.messaging.simp.SimpMessagingTemplate;import org.springframework.stereotype.Controller;@Controller@RequiredArgsConstructorpublic class ChatController {    private final MessageService messageService;    private final SimpMessagingTemplate messagingTemplate;    @MessageMapping("/chat.send")    public void sendMessage(SendMessageRequest request) {        try {            Message message = messageService.sendMessage(                    request.getConversationId(),                    request.getSenderId(),                    request.getReceiverId(), // This can be null or 0                    request.getContent()            );            // Convert to DTO            MessageDTO messageDTO = convertToDTO(message);            // Only send to conversation topic if we have a valid receiver            if (message.getReceiver() != null) {                // Send to specific conversation topic                messagingTemplate.convertAndSend(                        "/topic/conversation." + request.getConversationId(),                        messageDTO                );                // Send to receiver if available                messagingTemplate.convertAndSendToUser(                        message.getReceiver().getId().toString(),                        "/queue/messages",                        messageDTO                );            }            // Always send to sender for confirmation            messagingTemplate.convertAndSendToUser(                    request.getSenderId().toString(),                    "/queue/messages",                    messageDTO            );        } catch (Exception e) {            // Send error back to sender            messagingTemplate.convertAndSendToUser(                    request.getSenderId().toString(),                    "/queue/errors",                    "Failed to send message: " + e.getMessage()            );        }    }    private MessageDTO convertToDTO(Message message) {        MessageDTO dto = new MessageDTO();        dto.setId(message.getId());        dto.setConversationId(message.getConversation().getId());        dto.setContent(message.getContent());        dto.setCreatedAt(message.getCreatedAt());        // Convert sender to DTO        if (message.getSender() != null) {            UserDTO senderDTO = UserDTO.fromEntity(message.getSender());            dto.setSender(senderDTO);        }        // Convert receiver to DTO (can be null)        if (message.getReceiver() != null) {            UserDTO receiverDTO = UserDTO.fromEntity(message.getReceiver());            dto.setReceiver(receiverDTO);        }        return dto;    }}