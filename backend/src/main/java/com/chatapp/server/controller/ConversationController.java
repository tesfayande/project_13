package com.chatapp.server.controller;// ConversationController.javaimport com.chatapp.server.Models.Agent;import com.chatapp.server.dto.AgentDTO;import com.chatapp.server.dto.UserDTO;import com.chatapp.server.Models.Conversation;import com.chatapp.server.dto.ConversationDTO;import com.chatapp.server.payload.request.CreateConversationRequest;import com.chatapp.server.payload.request.JoinConversationRequest;import com.chatapp.server.service.ConversationService;import lombok.RequiredArgsConstructor;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.stream.Collectors;@RestController@RequestMapping("/api/conversations")@RequiredArgsConstructorpublic class ConversationController {    private final ConversationService conversationService;    // Original endpoint - maintains backward compatibility    @PostMapping("/create")    public ResponseEntity<ConversationDTO> createConversation(@RequestBody CreateConversationRequest request) {        Conversation conversation = conversationService.createConversationV2(request);        return ResponseEntity.ok(convertToDTO(conversation));    }    // NEW ENDPOINT: Create conversation with specific agent (no message required)    @PostMapping("/create-with-agent")    public ResponseEntity<ConversationDTO> createConversationWithAgent(            @RequestParam Long customerId,            @RequestParam Long agentId) {        Conversation conversation = conversationService.createConversationWithAgent(customerId, agentId);        return ResponseEntity.ok(convertToDTO(conversation));    }    @PostMapping("/join")    public ResponseEntity<ConversationDTO> joinConversation(@RequestBody JoinConversationRequest request) {        Conversation conversation = conversationService.joinConversation(                request.getAgentId(),                request.getConversationId()        );        return ResponseEntity.ok(convertToDTO(conversation));    }    @GetMapping("/customer/{customerUserId}")    public ResponseEntity<List<ConversationDTO>> getCustomerConversations(@PathVariable Long customerUserId) {        List<Conversation> conversations = conversationService.getCustomerConversations(customerUserId);        return ResponseEntity.ok(conversations.stream()                .map(this::convertToDTO)                .collect(Collectors.toList()));    }    @GetMapping("/agent/{agentUserId}")    public ResponseEntity<List<ConversationDTO>> getAgentConversations(@PathVariable Long agentUserId) {        List<Conversation> conversations = conversationService.getAgentConversations(agentUserId);        return ResponseEntity.ok(conversations.stream()                .map(this::convertToDTO)                .collect(Collectors.toList()));    }    @GetMapping("/available")    public ResponseEntity<List<ConversationDTO>> getAvailableConversations() {        List<Conversation> conversations = conversationService.getAvailableConversations();        return ResponseEntity.ok(conversations.stream()                .map(this::convertToDTO)                .collect(Collectors.toList()));    }    // NEW ENDPOINT: Get all available agents for customer to choose from    /*    @GetMapping("/agents")    public ResponseEntity<List<Agent>> getAllAgents() {        List<Agent> agents = conversationService.getAllAgents();        return ResponseEntity.ok(agents);    }     */    /*    @GetMapping("/agents")    public ResponseEntity<List<AgentDTO>> getAllAgents() {        List<Agent> agents = conversationService.getAllAgents();        List<AgentDTO> agentDTOs = agents.stream()                .map(agent -> {                    AgentDTO dto = new AgentDTO();                    dto.setId(agent.getId());                    if (agent.getUser() != null) {                        dto.setUser(UserDTO.fromEntity(agent.getUser()));                    }                    return dto;                })                .collect(Collectors.toList());        return ResponseEntity.ok(agentDTOs);    }     */    // ConversationController.java - Fix the getAllAgents endpoint    @GetMapping("/agents")    public ResponseEntity<List<AgentDTO>> getAllAgents() {        List<Agent> agents = conversationService.getAllAgents();        List<AgentDTO> agentDTOs = agents.stream()                .map(agent -> {                    AgentDTO dto = new AgentDTO();                    dto.setId(agent.getId());                    if (agent.getUser() != null) {                        dto.setUser(UserDTO.fromEntity(agent.getUser()));                    }                    return dto;                })                .collect(Collectors.toList());        return ResponseEntity.ok(agentDTOs);    }    private ConversationDTO convertToDTO(Conversation conversation) {        ConversationDTO dto = new ConversationDTO();        dto.setId(conversation.getId());        dto.setCreatedAt(conversation.getCreatedAt());        // Convert customer to DTO        if (conversation.getCustomer() != null && conversation.getCustomer().getUser() != null) {            dto.setCustomer(UserDTO.fromEntity(conversation.getCustomer().getUser()));        }        // Convert agent to DTO        if (conversation.getAgent() != null && conversation.getAgent().getUser() != null) {            dto.setAgent(UserDTO.fromEntity(conversation.getAgent().getUser()));        }        return dto;    }}