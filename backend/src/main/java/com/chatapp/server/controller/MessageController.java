package com.chatapp.server.controller;// MessageController.java (Complete Version)import com.chatapp.server.Models.Message;import com.chatapp.server.dto.MessageDTO;import com.chatapp.server.dto.UserDTO;import com.chatapp.server.payload.request.SendMessageRequest;import com.chatapp.server.service.MessageService;import lombok.RequiredArgsConstructor;import org.springframework.messaging.handler.annotation.MessageMapping;import org.springframework.messaging.simp.SimpMessagingTemplate;import org.springframework.web.bind.annotation.*;import org.springframework.http.ResponseEntity;import java.util.List;import java.util.stream.Collectors;@RestController@RequestMapping("/api/messages")@RequiredArgsConstructorpublic class MessageController {    private final MessageService messageService;    private final SimpMessagingTemplate messagingTemplate; // Add this    @MessageMapping("/send")    public void sendMessage(SendMessageRequest request) {        Message message = messageService.sendMessage(                request.getConversationId(),                request.getSenderId(),                request.getReceiverId(),                request.getContent()        );        // Convert to DTO        MessageDTO messageDTO = convertToDTO(message);        // Send to specific conversation topic        messagingTemplate.convertAndSend(                "/topic/conversation." + request.getConversationId(),                messageDTO        );        // Send to sender        messagingTemplate.convertAndSendToUser(                request.getSenderId().toString(),                "/queue/messages",                messageDTO        );        // Send to receiver        messagingTemplate.convertAndSendToUser(                request.getReceiverId().toString(),                "/queue/messages",                messageDTO        );    }    // REST endpoint for sending messages    @PostMapping("/send")    public ResponseEntity<MessageDTO> sendMessageRest(@RequestBody SendMessageRequest request) {        Message message = messageService.sendMessage(                request.getConversationId(),                request.getSenderId(),                request.getReceiverId(),                request.getContent()        );        // Convert to DTO        MessageDTO messageDTO = convertToDTO(message);        // Also broadcast via WebSocket for real-time updates        messagingTemplate.convertAndSend(                "/topic/conversation." + request.getConversationId(),                messageDTO        );        // Send to users        messagingTemplate.convertAndSendToUser(                request.getSenderId().toString(),                "/queue/messages",                messageDTO        );        messagingTemplate.convertAndSendToUser(                request.getReceiverId().toString(),                "/queue/messages",                messageDTO        );        return ResponseEntity.ok(messageDTO);    }    @GetMapping("/conversation/{conversationId}")    public ResponseEntity<List<MessageDTO>> getConversationMessages(@PathVariable Long conversationId) {        List<Message> messages = messageService.getConversationMessages(conversationId);        return ResponseEntity.ok(messages.stream()                .map(this::convertToDTO)                .collect(Collectors.toList()));    }    private MessageDTO convertToDTO(Message message) {        MessageDTO dto = new MessageDTO();        dto.setId(message.getId());        dto.setConversationId(message.getConversation().getId());        dto.setContent(message.getContent());        dto.setCreatedAt(message.getCreatedAt());        // Convert sender to DTO        if (message.getSender() != null) {            UserDTO senderDTO = new UserDTO();            senderDTO.setId(message.getSender().getId());            senderDTO.setFirstName(message.getSender().getFirstName());            senderDTO.setLastName(message.getSender().getLastName());            senderDTO.setEmail(message.getSender().getEmail());            senderDTO.setName(message.getSender().getName());            dto.setSender(senderDTO);        }        // Convert receiver to DTO        if (message.getReceiver() != null) {            UserDTO receiverDTO = new UserDTO();            receiverDTO.setId(message.getReceiver().getId());            receiverDTO.setFirstName(message.getReceiver().getFirstName());            receiverDTO.setLastName(message.getReceiver().getLastName());            receiverDTO.setEmail(message.getReceiver().getEmail());            receiverDTO.setName(message.getReceiver().getName());            dto.setReceiver(receiverDTO);        }        return dto;    }}