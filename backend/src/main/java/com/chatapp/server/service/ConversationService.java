package com.chatapp.server.service;// ConversationService.javaimport com.chatapp.server.Models.Conversation;import com.chatapp.server.Models.Customer;import com.chatapp.server.Models.User;import com.chatapp.server.Models.Agent;import com.chatapp.server.Models.Message;import com.chatapp.server.repository.AgentRepository;import com.chatapp.server.repository.ConversationRepository;import com.chatapp.server.repository.CustomerRepository;import com.chatapp.server.repository.MessageRepository;import com.chatapp.server.payload.request.CreateConversationRequest;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;@Service@RequiredArgsConstructorpublic class ConversationService {    private final ConversationRepository conversationRepository;    private final CustomerRepository customerRepository;    private final AgentRepository agentRepository;    private final UserService userService;    private final MessageRepository messageRepository;    // Existing method - creates conversation without agent    // ConversationService.java (Updated - fix createConversation method)    public Conversation createConversation(Long customerUserId, String initialMessage) {        // First, verify the user exists and is a customer        User user = userService.findById(customerUserId)                .orElseThrow(() -> new RuntimeException("User not found with ID: " + customerUserId));        if (user.getType() != User.UserType.CUSTOMER) {            throw new RuntimeException("User is not a customer. Only customers can create conversations.");        }        // Find customer by user ID        Customer customer = customerRepository.findByUserId(customerUserId)                .orElseThrow(() -> new RuntimeException("Customer profile not found for user ID: " + customerUserId));        // Create new conversation without agent        Conversation conversation = new Conversation();        conversation.setCustomer(customer);        conversation.setAgent(null); // Agent will join later        Conversation savedConversation = conversationRepository.save(conversation);        // Create initial message - but don't set receiver since no agent is assigned yet        if (initialMessage != null && !initialMessage.trim().isEmpty()) {            Message message = new Message();            message.setConversation(savedConversation);            message.setSender(user);            message.setReceiver(null); // No receiver for initial message            message.setContent(initialMessage);            messageRepository.save(message);        }        return savedConversation;    }    // NEW METHOD: Create conversation with specific agent (no initial message required)    public Conversation createConversationWithAgent(Long customerUserId, Long agentUserId) {        // First, verify the customer user exists and is a customer        User customerUser = userService.findById(customerUserId)                .orElseThrow(() -> new RuntimeException("Customer user not found with ID: " + customerUserId));        if (customerUser.getType() != User.UserType.CUSTOMER) {            throw new RuntimeException("User is not a customer. Only customers can create conversations.");        }        // Verify the agent user exists and is an agent        User agentUser = userService.findById(agentUserId)                .orElseThrow(() -> new RuntimeException("Agent user not found with ID: " + agentUserId));        if (agentUser.getType() != User.UserType.AGENT) {            throw new RuntimeException("User is not an agent. Cannot assign non-agent to conversation.");        }        // Find customer by user ID        Customer customer = customerRepository.findByUserId(customerUserId)                .orElseThrow(() -> new RuntimeException("Customer profile not found for user ID: " + customerUserId));        // Find agent by user ID        Agent agent = agentRepository.findByUserId(agentUserId)                .orElseThrow(() -> new RuntimeException("Agent profile not found for user ID: " + agentUserId));        // Check if conversation already exists between this customer and agent        Optional<Conversation> existingConversation = conversationRepository                .findByCustomerIdAndAgentId(customer.getId(), agent.getId());        if (existingConversation.isPresent()) {            throw new RuntimeException("Conversation already exists between this customer and agent");        }        // Create new conversation with the selected agent        Conversation conversation = new Conversation();        conversation.setCustomer(customer);        conversation.setAgent(agent); // Assign the selected agent immediately        return conversationRepository.save(conversation);    }    // Updated method to handle both cases (with or without agent)    public Conversation createConversationV2(CreateConversationRequest request) {        if (request.getAgentId() != null) {            // Create conversation with specific agent            return createConversationWithAgent(request.getCustomerId(), request.getAgentId());        } else {            // Create conversation without agent (agent can join later)            return createConversation(request.getCustomerId(), request.getInitialMessage());        }    }    public Conversation joinConversation(Long agentUserId, Long conversationId) {        // First, verify the user exists and is an agent        User user = userService.findById(agentUserId)                .orElseThrow(() -> new RuntimeException("User not found with ID: " + agentUserId));        if (user.getType() != User.UserType.AGENT) {            throw new RuntimeException("User is not an agent. Only agents can join conversations.");        }        // Find agent by user ID        Agent agent = agentRepository.findByUserId(agentUserId)                .orElseThrow(() -> new RuntimeException("Agent profile not found for user ID: " + agentUserId));        // Find conversation        Conversation conversation = conversationRepository.findById(conversationId)                .orElseThrow(() -> new RuntimeException("Conversation not found with ID: " + conversationId));        // Check if conversation already has an agent        if (conversation.getAgent() != null) {            throw new RuntimeException("Conversation already has an agent assigned");        }        conversation.setAgent(agent);        return conversationRepository.save(conversation);    }    public List<Conversation> getCustomerConversations(Long customerUserId) {        // Verify user exists and is customer        User user = userService.findById(customerUserId)                .orElseThrow(() -> new RuntimeException("User not found with ID: " + customerUserId));        if (user.getType() != User.UserType.CUSTOMER) {            throw new RuntimeException("User is not a customer");        }        Customer customer = customerRepository.findByUserId(customerUserId)                .orElseThrow(() -> new RuntimeException("Customer profile not found"));        return conversationRepository.findByCustomerId(customer.getId());    }    public List<Conversation> getAgentConversations(Long agentUserId) {        // Verify user exists and is agent        User user = userService.findById(agentUserId)                .orElseThrow(() -> new RuntimeException("User not found with ID: " + agentUserId));        if (user.getType() != User.UserType.AGENT) {            throw new RuntimeException("User is not an agent");        }        Agent agent = agentRepository.findByUserId(agentUserId)                .orElseThrow(() -> new RuntimeException("Agent profile not found"));        return conversationRepository.findByAgentId(agent.getId());    }    public List<Conversation> getAvailableConversations() {        return conversationRepository.findByAgentIsNull();    }    // ConversationService.java - Fix getAllAgents method    public List<Agent> getAllAgents() {        List<Agent> allAgents = agentRepository.findAll();        // Filter to ensure we only return agents with AGENT user type        return allAgents.stream()                .filter(agent -> agent.getUser() != null && agent.getUser().getType() == User.UserType.AGENT)                .collect(Collectors.toList());    }    /*    public List<Agent> getAllAgents() {        return agentRepository.findAll();    }*/    public Optional<Conversation> findById(Long id) {        return conversationRepository.findById(id);    }}